import { serve } from "https://deno.land/std@0.168.0/http/server.ts"

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    const { url } = await req.json()

    if (!url) {
      return new Response(
        JSON.stringify({ error: 'URL is required' }),
        { 
          status: 400, 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
        }
      )
    }

    console.log(`Analyzing website: ${url}`)

    // Step 1: Extract website content using Jina AI Reader
    console.log('Fetching content with Jina AI Reader...')
    const jinaResponse = await fetch(`https://r.jina.ai/${url}`, {
      headers: {
        'Accept': 'application/json',
        'User-Agent': 'Marketing-Buddy-Analysis/1.0'
      }
    })

    if (!jinaResponse.ok) {
      throw new Error(`Jina AI Reader failed: ${jinaResponse.status} ${jinaResponse.statusText}`)
    }

    const jinaData = await jinaResponse.json()
    console.log('Jina AI Response received successfully')
    
    // Extract content from Jina AI's nested response structure
    let websiteContent = ''
    if (jinaData.data && jinaData.data.content) {
      websiteContent = jinaData.data.content
    } else if (jinaData.content) {
      websiteContent = jinaData.content
    } else if (typeof jinaData === 'string') {
      websiteContent = jinaData
    } else {
      throw new Error('Unexpected response format from Jina AI')
    }

    if (!websiteContent || websiteContent.trim() === '') {
      throw new Error('No content extracted from website')
    }

    console.log(`Extracted ${websiteContent.length} characters of content`)
    console.log('Content preview:', websiteContent.substring(0, 500) + '...')

    // Step 2: Analyze with OpenRouter AI
    const openRouterApiKey = Deno.env.get('OPENROUTER_API_KEY')
    if (!openRouterApiKey) {
      throw new Error('OpenRouter API key not configured')
    }

    const analysisPrompt = `
You are a marketing expert analyzing a website. Based on the website content below, provide a comprehensive marketing analysis.

Website URL: ${url}
Website Content:
${websiteContent}

Please provide a detailed analysis covering:

1. **Business Overview**
   - What does this business do?
   - Target audience and market positioning
   - Key value propositions

2. **Marketing Strengths**
   - What they're doing well in their messaging
   - Strong points in their positioning
   - Effective marketing elements

3. **Marketing Opportunities**
   - Areas for improvement in messaging
   - Missing marketing elements
   - Potential growth strategies

4. **Content & Messaging Analysis**
   - Tone and voice assessment
   - Key messages and themes
   - Content quality and effectiveness

5. **Competitive Positioning**
   - How they differentiate themselves
   - Unique selling points
   - Market positioning insights

6. **Actionable Recommendations**
   - Specific marketing improvements
   - Content strategy suggestions
   - Growth opportunities

Format your response as structured markdown with clear headings and bullet points.
`

    console.log('Sending content to OpenRouter for analysis...')
    const aiResponse = await fetch('https://openrouter.ai/api/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openRouterApiKey}`,
        'Content-Type': 'application/json',
        'HTTP-Referer': 'https://marketing-buddy-habits.vercel.app',
        'X-Title': 'Marketing Buddy Habits'
      },
      body: JSON.stringify({
        model: 'deepseek/deepseek-r1-0528-qwen3-8b:free',
        messages: [
          {
            role: 'user',
            content: analysisPrompt
          }
        ],
        max_tokens: 4000,
        temperature: 0.7
      })
    })

    if (!aiResponse.ok) {
      const errorText = await aiResponse.text()
      throw new Error(`OpenRouter API failed: ${aiResponse.status} ${errorText}`)
    }

    const aiData = await aiResponse.json()
    const analysis = aiData.choices?.[0]?.message?.content

    if (!analysis) {
      throw new Error('No analysis generated by AI')
    }

    // --- Extract all 6 sections for key insights generation ---
    // Import extractSection dynamically
    const { extractSection } = await import("./extractSection.ts");
    const businessOverview = extractSection(analysis, 'Business Overview');
    const marketingStrengths = extractSection(analysis, 'Marketing Strengths');
    const marketingOpportunities = extractSection(analysis, 'Marketing Opportunities');
    const contentMessaging = extractSection(analysis, 'Content & Messaging Analysis');
    const competitivePositioning = extractSection(analysis, 'Competitive Positioning');
    const actionableRecommendations = extractSection(analysis, 'Actionable Recommendations');

    // Helper to create a single concise bullet point for each section
    async function getSectionSummary(sectionContent: string, sectionTitle: string): Promise<string> {
      if (!sectionContent || sectionContent.length < 20) return `${sectionTitle}: No insights available`;
      const summaryPrompt = `Create ONE concise bullet point (max 8-10 words) that summarizes the key actionable insight from this ${sectionTitle} section. Focus on what the user should DO or IMPROVE:\n\n${sectionContent}`;
      const summaryRes = await fetch('https://openrouter.ai/api/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${openRouterApiKey}`,
          'Content-Type': 'application/json',
          'HTTP-Referer': 'https://marketing-buddy-habits.vercel.app',
          'X-Title': 'Marketing Buddy Habits'
        },
        body: JSON.stringify({
          model: 'deepseek/deepseek-r1-0528-qwen3-8b:free',
          messages: [
            { role: 'user', content: summaryPrompt }
          ],
          max_tokens: 64,
          temperature: 0.3
        })
      });
      if (!summaryRes.ok) return `${sectionTitle}: Summary generation failed`;
      const summaryData = await summaryRes.json();
      const summaryText = summaryData.choices?.[0]?.message?.content || '';
      // Clean up the response and ensure it's concise
      return summaryText.replace(/^[-â€¢*]?\s*/, '').trim() || `${sectionTitle}: No specific insights`;
    }

    // Generate one concise bullet point for each of the 6 sections
    const [businessSummary, strengthsSummary, opportunitiesSummary, contentSummary, competitiveSummary, recommendationsSummary] = await Promise.all([
      getSectionSummary(businessOverview, 'Business Overview'),
      getSectionSummary(marketingStrengths, 'Marketing Strengths'),
      getSectionSummary(marketingOpportunities, 'Marketing Opportunities'),
      getSectionSummary(contentMessaging, 'Content & Messaging'),
      getSectionSummary(competitivePositioning, 'Competitive Positioning'),
      getSectionSummary(actionableRecommendations, 'Actionable Recommendations')
    ]);

    console.log('Analysis and key insights completed successfully');

    return new Response(
      JSON.stringify({
        success: true,
        url,
        contentLength: websiteContent.length,
        analysis,
        keyInsights: [
          businessSummary,
          strengthsSummary,
          opportunitiesSummary,
          contentSummary,
          competitiveSummary,
          recommendationsSummary
        ],
        extractedAt: new Date().toISOString()
      }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    )

  } catch (error) {
    console.error('Analysis error:', error)
    
    return new Response(
      JSON.stringify({ 
        error: error.message || 'Failed to analyze website',
        details: error.toString()
      }),
      { 
        status: 500, 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    )
  }
})
